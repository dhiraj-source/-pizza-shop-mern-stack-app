{"ast":null,"code":"// import axios from \"axios\";\n// export const placeOrder = (token, subTotal) => async (dispatch, getState) => {\n//   dispatch({ type: \"PLACE_ORDER_REQUEST\" });\n//   const currentUser = getState().loginUserReducer.currentUser;\n//   const cartItems = getState().cartReducer.cartItems;\n//   try {\n//     const res =await axios.post(\"/api/orders/placeorder\",\n//     //await axios.post(\"/api/orders/placeorder\", \n//     {\n//       token,\n//       subTotal,\n//       currentUser,\n//       cartItems,\n//     });\n//     dispatch({ type: \"PLACE_ORDER_SUCCESS\" });\n//     console.log(res);\n//   } catch (error) {\n//     dispatch({ type: \"PLACE_ORDER_FAIL\" });\n//     console.log(error);\n//   }\n// };\n// export const getUserOrders = () => async (dispatch, getState) => {\n//   const currentUser = getState().loginUserReducer.currentUser;\n//   dispatch({\n//     type: \"USER_ORDER_REQUEST\",\n//   });\n//   try {\n//     const response = await axios.post(\"/api/orders/getuserorder\", {\n//       userid: currentUser._id,\n//     });\n//     // console.log(response);\n//     dispatch({ type: \"USER_ORDER_SUCCESS\", payload: response.data });\n//   } catch (error) {\n//     dispatch({ type: \"USER_ORDER_FAIL\", payload: error });\n//   }\n// };\n// export const getAllOrders = () => async (dispatch, getState) => {\n//   // const currentUser = getState().loginUserReducer.currentUser;\n//   dispatch({\n//     type: \"ALL_ORDER_REQUEST\",\n//   });\n//   try {\n//     const response = await axios.get(\"/api/orders/alluserorder\");\n//     dispatch({ type: \"ALL_ORDER_SUCCESS\", payload: response.data });\n//   } catch (error) {\n//     dispatch({ type: \"ALL_ORDER_FAIL\", payload: error });\n//   }\n// };\n// export const deliverOrder = (orderid) => async (dispatch, getState) => {\n//   // const currentUser = getState().loginUserReducer.currentUser;\n//   dispatch({\n//     type: \"GET_ALL_ORDER_REQUEST\",\n//   });\n//   try {\n//     await axios.post(\"/api/orders/deliverorder\", { orderid });\n//     alert(\"Deliverd Success\");\n//     const orders = await axios.get(\"/api/orders/alluserorder\");\n//     dispatch({ type: \"GET_ALL_ORDER_SUCCESS\", payload: orders.data });\n//     window.location.href = \"/admin/orderlist\";\n//   } catch (error) {\n//     dispatch({ type: \"GET_ALL_ORDER_FAIL\", payload: error });\n//   }\n// };\nimport axios from \"axios\";\nimport { loadStripe } from '@stripe/stripe-js';\nconst stripePromise = loadStripe('pk_test_51Mg1EqSBBKYSWYjJbuUx2YE7tMRJBF4rxJU9xlXzZqvC04gxGGV8etBoM537jzWJSMgmT6xZpEewTKHHi8NONsXP007AiT2FFN');\nexport const placeOrder = (token, subTotal) => async (dispatch, getState) => {\n  dispatch({\n    type: \"PLACE_ORDER_REQUEST\"\n  });\n  const currentUser = getState().loginUserReducer.currentUser;\n  const cartItems = getState().cartReducer.cartItems;\n\n  try {\n    const stripe = await stripePromise;\n    const {\n      data\n    } = await axios.post(\"/api/orders/placeorder\", {\n      token,\n      subTotal,\n      currentUser,\n      cartItems\n    }); // Use the stripe object to create a payment intent and handle payment\n\n    const paymentIntent = await stripe.confirmCardPayment(data.clientSecret, {\n      payment_method: {\n        card: stripe.elements.getElement(\"card\"),\n        billing_details: {\n          name: token.card.name,\n          email: token.email\n        }\n      }\n    });\n\n    if (paymentIntent.error) {\n      // Payment failed\n      dispatch({\n        type: \"PLACE_ORDER_FAIL\"\n      });\n    } else {\n      // Payment succeeded\n      dispatch({\n        type: \"PLACE_ORDER_SUCCESS\"\n      });\n    }\n\n    console.log(paymentIntent);\n  } catch (error) {\n    dispatch({\n      type: \"PLACE_ORDER_FAIL\"\n    });\n    console.log(error);\n  }\n};","map":{"version":3,"sources":["C:/Users/dhira/Downloads/pizza-shop/client/src/actions/orderAction.js"],"names":["axios","loadStripe","stripePromise","placeOrder","token","subTotal","dispatch","getState","type","currentUser","loginUserReducer","cartItems","cartReducer","stripe","data","post","paymentIntent","confirmCardPayment","clientSecret","payment_method","card","elements","getElement","billing_details","name","email","error","console","log"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,mBAA3B;AAEA,MAAMC,aAAa,GAAGD,UAAU,CAAC,6GAAD,CAAhC;AAEA,OAAO,MAAME,UAAU,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AAC3ED,EAAAA,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAR;AACA,QAAMC,WAAW,GAAGF,QAAQ,GAAGG,gBAAX,CAA4BD,WAAhD;AACA,QAAME,SAAS,GAAGJ,QAAQ,GAAGK,WAAX,CAAuBD,SAAzC;;AACA,MAAI;AACF,UAAME,MAAM,GAAG,MAAMX,aAArB;AACA,UAAM;AAAEY,MAAAA;AAAF,QAAW,MAAMd,KAAK,CAACe,IAAN,CAAW,wBAAX,EAAqC;AAC1DX,MAAAA,KAD0D;AAE1DC,MAAAA,QAF0D;AAG1DI,MAAAA,WAH0D;AAI1DE,MAAAA;AAJ0D,KAArC,CAAvB,CAFE,CAQF;;AACA,UAAMK,aAAa,GAAG,MAAMH,MAAM,CAACI,kBAAP,CAA0BH,IAAI,CAACI,YAA/B,EAA6C;AACvEC,MAAAA,cAAc,EAAE;AACdC,QAAAA,IAAI,EAAEP,MAAM,CAACQ,QAAP,CAAgBC,UAAhB,CAA2B,MAA3B,CADQ;AAEdC,QAAAA,eAAe,EAAE;AACfC,UAAAA,IAAI,EAAEpB,KAAK,CAACgB,IAAN,CAAWI,IADF;AAEfC,UAAAA,KAAK,EAAErB,KAAK,CAACqB;AAFE;AAFH;AADuD,KAA7C,CAA5B;;AASA,QAAIT,aAAa,CAACU,KAAlB,EAAyB;AACvB;AACApB,MAAAA,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAR;AACD,KAHD,MAGO;AACL;AACAF,MAAAA,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAR;AACD;;AACDmB,IAAAA,OAAO,CAACC,GAAR,CAAYZ,aAAZ;AACD,GA1BD,CA0BE,OAAOU,KAAP,EAAc;AACdpB,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACAmB,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,CAlCM","sourcesContent":["// import axios from \"axios\";\r\n\r\n// export const placeOrder = (token, subTotal) => async (dispatch, getState) => {\r\n//   dispatch({ type: \"PLACE_ORDER_REQUEST\" });\r\n//   const currentUser = getState().loginUserReducer.currentUser;\r\n//   const cartItems = getState().cartReducer.cartItems;\r\n//   try {\r\n//     const res =await axios.post(\"/api/orders/placeorder\",\r\n//     //await axios.post(\"/api/orders/placeorder\", \r\n//     {\r\n//       token,\r\n//       subTotal,\r\n//       currentUser,\r\n//       cartItems,\r\n//     });\r\n//     dispatch({ type: \"PLACE_ORDER_SUCCESS\" });\r\n//     console.log(res);\r\n//   } catch (error) {\r\n//     dispatch({ type: \"PLACE_ORDER_FAIL\" });\r\n//     console.log(error);\r\n//   }\r\n// };\r\n\r\n// export const getUserOrders = () => async (dispatch, getState) => {\r\n//   const currentUser = getState().loginUserReducer.currentUser;\r\n//   dispatch({\r\n//     type: \"USER_ORDER_REQUEST\",\r\n//   });\r\n//   try {\r\n//     const response = await axios.post(\"/api/orders/getuserorder\", {\r\n//       userid: currentUser._id,\r\n//     });\r\n//     // console.log(response);\r\n//     dispatch({ type: \"USER_ORDER_SUCCESS\", payload: response.data });\r\n//   } catch (error) {\r\n//     dispatch({ type: \"USER_ORDER_FAIL\", payload: error });\r\n//   }\r\n// };\r\n// export const getAllOrders = () => async (dispatch, getState) => {\r\n//   // const currentUser = getState().loginUserReducer.currentUser;\r\n//   dispatch({\r\n//     type: \"ALL_ORDER_REQUEST\",\r\n//   });\r\n//   try {\r\n//     const response = await axios.get(\"/api/orders/alluserorder\");\r\n//     dispatch({ type: \"ALL_ORDER_SUCCESS\", payload: response.data });\r\n//   } catch (error) {\r\n//     dispatch({ type: \"ALL_ORDER_FAIL\", payload: error });\r\n//   }\r\n// };\r\n\r\n// export const deliverOrder = (orderid) => async (dispatch, getState) => {\r\n//   // const currentUser = getState().loginUserReducer.currentUser;\r\n//   dispatch({\r\n//     type: \"GET_ALL_ORDER_REQUEST\",\r\n//   });\r\n//   try {\r\n//     await axios.post(\"/api/orders/deliverorder\", { orderid });\r\n//     alert(\"Deliverd Success\");\r\n//     const orders = await axios.get(\"/api/orders/alluserorder\");\r\n//     dispatch({ type: \"GET_ALL_ORDER_SUCCESS\", payload: orders.data });\r\n//     window.location.href = \"/admin/orderlist\";\r\n//   } catch (error) {\r\n//     dispatch({ type: \"GET_ALL_ORDER_FAIL\", payload: error });\r\n//   }\r\n// };\r\n\r\n\r\nimport axios from \"axios\";\r\nimport { loadStripe } from '@stripe/stripe-js';\r\n\r\nconst stripePromise = loadStripe('pk_test_51Mg1EqSBBKYSWYjJbuUx2YE7tMRJBF4rxJU9xlXzZqvC04gxGGV8etBoM537jzWJSMgmT6xZpEewTKHHi8NONsXP007AiT2FFN');\r\n\r\nexport const placeOrder = (token, subTotal) => async (dispatch, getState) => {\r\n  dispatch({ type: \"PLACE_ORDER_REQUEST\" });\r\n  const currentUser = getState().loginUserReducer.currentUser;\r\n  const cartItems = getState().cartReducer.cartItems;\r\n  try {\r\n    const stripe = await stripePromise;\r\n    const { data } = await axios.post(\"/api/orders/placeorder\", {\r\n      token,\r\n      subTotal,\r\n      currentUser,\r\n      cartItems,\r\n    });\r\n    // Use the stripe object to create a payment intent and handle payment\r\n    const paymentIntent = await stripe.confirmCardPayment(data.clientSecret, {\r\n      payment_method: {\r\n        card: stripe.elements.getElement(\"card\"),\r\n        billing_details: {\r\n          name: token.card.name,\r\n          email: token.email,\r\n        },\r\n      },\r\n    });\r\n    if (paymentIntent.error) {\r\n      // Payment failed\r\n      dispatch({ type: \"PLACE_ORDER_FAIL\" });\r\n    } else {\r\n      // Payment succeeded\r\n      dispatch({ type: \"PLACE_ORDER_SUCCESS\" });\r\n    }\r\n    console.log(paymentIntent);\r\n  } catch (error) {\r\n    dispatch({ type: \"PLACE_ORDER_FAIL\" });\r\n    console.log(error);\r\n  }\r\n};"]},"metadata":{},"sourceType":"module"}