{"ast":null,"code":"// import axios from \"axios\";\n// export const placeOrder = (token, subTotal) => async (dispatch, getState) => {\n//   dispatch({ type: \"PLACE_ORDER_REQUEST\" });\n//   const currentUser = getState().loginUserReducer.currentUser;\n//   const cartItems = getState().cartReducer.cartItems;\n//   try {\n//     const res =await axios.post(\"/api/orders/placeorder\",\n//     //await axios.post(\"/api/orders/placeorder\", \n//     {\n//       token,\n//       subTotal,\n//       currentUser,\n//       cartItems,\n//     });\n//     dispatch({ type: \"PLACE_ORDER_SUCCESS\" });\n//     console.log(res);\n//   } catch (error) {\n//     dispatch({ type: \"PLACE_ORDER_FAIL\" });\n//     console.log(error);\n//   }\n// };\n// export const getUserOrders = () => async (dispatch, getState) => {\n//   const currentUser = getState().loginUserReducer.currentUser;\n//   dispatch({\n//     type: \"USER_ORDER_REQUEST\",\n//   });\n//   try {\n//     const response = await axios.post(\"/api/orders/getuserorder\", {\n//       userid: currentUser._id,\n//     });\n//     // console.log(response);\n//     dispatch({ type: \"USER_ORDER_SUCCESS\", payload: response.data });\n//   } catch (error) {\n//     dispatch({ type: \"USER_ORDER_FAIL\", payload: error });\n//   }\n// };\n// export const getAllOrders = () => async (dispatch, getState) => {\n//   // const currentUser = getState().loginUserReducer.currentUser;\n//   dispatch({\n//     type: \"ALL_ORDER_REQUEST\",\n//   });\n//   try {\n//     const response = await axios.get(\"/api/orders/alluserorder\");\n//     dispatch({ type: \"ALL_ORDER_SUCCESS\", payload: response.data });\n//   } catch (error) {\n//     dispatch({ type: \"ALL_ORDER_FAIL\", payload: error });\n//   }\n// };\n// export const deliverOrder = (orderid) => async (dispatch, getState) => {\n//   // const currentUser = getState().loginUserReducer.currentUser;\n//   dispatch({\n//     type: \"GET_ALL_ORDER_REQUEST\",\n//   });\n//   try {\n//     await axios.post(\"/api/orders/deliverorder\", { orderid });\n//     alert(\"Deliverd Success\");\n//     const orders = await axios.get(\"/api/orders/alluserorder\");\n//     dispatch({ type: \"GET_ALL_ORDER_SUCCESS\", payload: orders.data });\n//     window.location.href = \"/admin/orderlist\";\n//   } catch (error) {\n//     dispatch({ type: \"GET_ALL_ORDER_FAIL\", payload: error });\n//   }\n// };\nimport axios from \"axios\";\nexport const placeOrder = (token, subTotal) => async (dispatch, getState) => {\n  dispatch({\n    type: \"PLACE_ORDER_REQUEST\"\n  });\n  const currentUser = getState().loginUserReducer.currentUser;\n  const cartItems = getState().cartReducer.cartItems;\n\n  try {\n    const {\n      data: paymentIntent\n    } = await axios.post(\"/api/orders/placeorder\", {\n      token,\n      subTotal,\n      currentUser,\n      cartItems\n    });\n\n    if (paymentIntent.status === \"requires_action\" && paymentIntent.next_action.type === \"use_stripe_sdk\") {\n      // Use Stripe.js to handle 3DS authentication\n      const {\n        error: error2,\n        paymentIntent: updatedPaymentIntent\n      } = await stripe.handleCardAction(paymentIntent.client_secret);\n\n      if (error2) {\n        // Handle error\n        dispatch({\n          type: \"PLACE_ORDER_FAIL\"\n        });\n        console.log(error2);\n      } else if (updatedPaymentIntent.status === \"succeeded\") {\n        // Payment succeeded\n        dispatch({\n          type: \"PLACE_ORDER_SUCCESS\"\n        });\n        console.log(\"Payment successful\");\n      }\n    } else if (paymentIntent.status === \"succeeded\") {\n      // Payment succeeded\n      dispatch({\n        type: \"PLACE_ORDER_SUCCESS\"\n      });\n      console.log(\"Payment successful\");\n    } else {\n      // Payment failed\n      dispatch({\n        type: \"PLACE_ORDER_FAIL\"\n      });\n      console.log(\"Payment failed\");\n    }\n  } catch (error) {\n    dispatch({\n      type: \"PLACE_ORDER_FAIL\"\n    });\n    console.log(error);\n  }\n};","map":{"version":3,"sources":["C:/Users/dhira/Downloads/pizza-shop/client/src/actions/orderAction.js"],"names":["axios","placeOrder","token","subTotal","dispatch","getState","type","currentUser","loginUserReducer","cartItems","cartReducer","data","paymentIntent","post","status","next_action","error","error2","updatedPaymentIntent","stripe","handleCardAction","client_secret","console","log"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,UAAU,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AAC3ED,EAAAA,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAR;AACA,QAAMC,WAAW,GAAGF,QAAQ,GAAGG,gBAAX,CAA4BD,WAAhD;AACA,QAAME,SAAS,GAAGJ,QAAQ,GAAGK,WAAX,CAAuBD,SAAzC;;AACA,MAAI;AACF,UAAM;AAAEE,MAAAA,IAAI,EAAEC;AAAR,QAA0B,MAAMZ,KAAK,CAACa,IAAN,CAAW,wBAAX,EAAqC;AACzEX,MAAAA,KADyE;AAEzEC,MAAAA,QAFyE;AAGzEI,MAAAA,WAHyE;AAIzEE,MAAAA;AAJyE,KAArC,CAAtC;;AAMA,QAAIG,aAAa,CAACE,MAAd,KAAyB,iBAAzB,IAA8CF,aAAa,CAACG,WAAd,CAA0BT,IAA1B,KAAmC,gBAArF,EAAuG;AACrG;AACA,YAAM;AAAEU,QAAAA,KAAK,EAAEC,MAAT;AAAiBL,QAAAA,aAAa,EAAEM;AAAhC,UAAyD,MAAMC,MAAM,CAACC,gBAAP,CAAwBR,aAAa,CAACS,aAAtC,CAArE;;AACA,UAAIJ,MAAJ,EAAY;AACV;AACAb,QAAAA,QAAQ,CAAC;AAAEE,UAAAA,IAAI,EAAE;AAAR,SAAD,CAAR;AACAgB,QAAAA,OAAO,CAACC,GAAR,CAAYN,MAAZ;AACD,OAJD,MAIO,IAAIC,oBAAoB,CAACJ,MAArB,KAAgC,WAApC,EAAiD;AACtD;AACAV,QAAAA,QAAQ,CAAC;AAAEE,UAAAA,IAAI,EAAE;AAAR,SAAD,CAAR;AACAgB,QAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACD;AACF,KAZD,MAYO,IAAIX,aAAa,CAACE,MAAd,KAAyB,WAA7B,EAA0C;AAC/C;AACAV,MAAAA,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAR;AACAgB,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACD,KAJM,MAIA;AACL;AACAnB,MAAAA,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAR;AACAgB,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACD;AACF,GA5BD,CA4BE,OAAOP,KAAP,EAAc;AACdZ,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACAgB,IAAAA,OAAO,CAACC,GAAR,CAAYP,KAAZ;AACD;AACF,CApCM","sourcesContent":["// import axios from \"axios\";\r\n\r\n// export const placeOrder = (token, subTotal) => async (dispatch, getState) => {\r\n//   dispatch({ type: \"PLACE_ORDER_REQUEST\" });\r\n//   const currentUser = getState().loginUserReducer.currentUser;\r\n//   const cartItems = getState().cartReducer.cartItems;\r\n//   try {\r\n//     const res =await axios.post(\"/api/orders/placeorder\",\r\n//     //await axios.post(\"/api/orders/placeorder\", \r\n//     {\r\n//       token,\r\n//       subTotal,\r\n//       currentUser,\r\n//       cartItems,\r\n//     });\r\n//     dispatch({ type: \"PLACE_ORDER_SUCCESS\" });\r\n//     console.log(res);\r\n//   } catch (error) {\r\n//     dispatch({ type: \"PLACE_ORDER_FAIL\" });\r\n//     console.log(error);\r\n//   }\r\n// };\r\n\r\n// export const getUserOrders = () => async (dispatch, getState) => {\r\n//   const currentUser = getState().loginUserReducer.currentUser;\r\n//   dispatch({\r\n//     type: \"USER_ORDER_REQUEST\",\r\n//   });\r\n//   try {\r\n//     const response = await axios.post(\"/api/orders/getuserorder\", {\r\n//       userid: currentUser._id,\r\n//     });\r\n//     // console.log(response);\r\n//     dispatch({ type: \"USER_ORDER_SUCCESS\", payload: response.data });\r\n//   } catch (error) {\r\n//     dispatch({ type: \"USER_ORDER_FAIL\", payload: error });\r\n//   }\r\n// };\r\n// export const getAllOrders = () => async (dispatch, getState) => {\r\n//   // const currentUser = getState().loginUserReducer.currentUser;\r\n//   dispatch({\r\n//     type: \"ALL_ORDER_REQUEST\",\r\n//   });\r\n//   try {\r\n//     const response = await axios.get(\"/api/orders/alluserorder\");\r\n//     dispatch({ type: \"ALL_ORDER_SUCCESS\", payload: response.data });\r\n//   } catch (error) {\r\n//     dispatch({ type: \"ALL_ORDER_FAIL\", payload: error });\r\n//   }\r\n// };\r\n\r\n// export const deliverOrder = (orderid) => async (dispatch, getState) => {\r\n//   // const currentUser = getState().loginUserReducer.currentUser;\r\n//   dispatch({\r\n//     type: \"GET_ALL_ORDER_REQUEST\",\r\n//   });\r\n//   try {\r\n//     await axios.post(\"/api/orders/deliverorder\", { orderid });\r\n//     alert(\"Deliverd Success\");\r\n//     const orders = await axios.get(\"/api/orders/alluserorder\");\r\n//     dispatch({ type: \"GET_ALL_ORDER_SUCCESS\", payload: orders.data });\r\n//     window.location.href = \"/admin/orderlist\";\r\n//   } catch (error) {\r\n//     dispatch({ type: \"GET_ALL_ORDER_FAIL\", payload: error });\r\n//   }\r\n// };\r\n\r\n\r\nimport axios from \"axios\";\r\n\r\nexport const placeOrder = (token, subTotal) => async (dispatch, getState) => {\r\n  dispatch({ type: \"PLACE_ORDER_REQUEST\" });\r\n  const currentUser = getState().loginUserReducer.currentUser;\r\n  const cartItems = getState().cartReducer.cartItems;\r\n  try {\r\n    const { data: paymentIntent } = await axios.post(\"/api/orders/placeorder\", {\r\n      token,\r\n      subTotal,\r\n      currentUser,\r\n      cartItems,\r\n    });\r\n    if (paymentIntent.status === \"requires_action\" && paymentIntent.next_action.type === \"use_stripe_sdk\") {\r\n      // Use Stripe.js to handle 3DS authentication\r\n      const { error: error2, paymentIntent: updatedPaymentIntent } = await stripe.handleCardAction(paymentIntent.client_secret);\r\n      if (error2) {\r\n        // Handle error\r\n        dispatch({ type: \"PLACE_ORDER_FAIL\" });\r\n        console.log(error2);\r\n      } else if (updatedPaymentIntent.status === \"succeeded\") {\r\n        // Payment succeeded\r\n        dispatch({ type: \"PLACE_ORDER_SUCCESS\" });\r\n        console.log(\"Payment successful\");\r\n      }\r\n    } else if (paymentIntent.status === \"succeeded\") {\r\n      // Payment succeeded\r\n      dispatch({ type: \"PLACE_ORDER_SUCCESS\" });\r\n      console.log(\"Payment successful\");\r\n    } else {\r\n      // Payment failed\r\n      dispatch({ type: \"PLACE_ORDER_FAIL\" });\r\n      console.log(\"Payment failed\");\r\n    }\r\n  } catch (error) {\r\n    dispatch({ type: \"PLACE_ORDER_FAIL\" });\r\n    console.log(error);\r\n  }\r\n};"]},"metadata":{},"sourceType":"module"}